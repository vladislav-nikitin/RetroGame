import GamePlay from "./GamePlay";
import GameState from "./GameState";
import Team from "./Team";
import themes from "./themes";
import cursors from "./cursors";
import PositionedCharacter from "./PositionedCharacter";
import Bowman from "./Characters.js/Bowman";
import Daemon from "./Characters.js/Daemon";
import Magician from "./Characters.js/Magician";
import Swordsman from "./Characters.js/Swordsman";
import Undead from "./Characters.js/Undead";
import Vampire from "./Characters.js/Vampire";

import { generateTeam, characterGenerator } from "./generators";

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.players = [];
    this.currentTurn = "player"; // –ù—É–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á–µ–π —Å–µ–π—á–∞—Å —Ö–æ–¥: –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    this.selectedChar = null; // –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂
    this.availableSteps = null; // –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —à–∞–≥–∏
  }

  init() {
    // –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ drawUi —Å –Ω—É–∂–Ω–æ–π —Ç–µ–º–æ–π –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    // (–≤—ã–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –º–µ—Ç–æ–¥–µ init –∫–ª–∞—Å—Å–∞ GameController)
    this.gamePlay.drawUi(themes.prairie);

    // –ü–æ–¥—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –º–æ–¥—É–ª—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –≤ –Ω—ë–º –æ–±—ä–µ–∫—Ç
    // (–∞ –Ω–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å—Ç—Ä–æ–∫–∏ —Ä—É–∫–∞–º–∏).
    // –ü–æ–∫–∞ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ


    // —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this)); // –í—Ö–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏ –≤ —è—á–µ–π–∫—É –ø–æ–ª—è
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this)); // –í—ã—Ö–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏ –∏–∑ —è—á–µ–π–∫–∏ –ø–æ–ª—è
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this)); // –ö–ª–∏–∫ –º—ã—à—å—é –ø–æ —è—á–µ–π–∫–µ –ø–æ–ª—è
    // –ù–æ–≤–∞—è –∏–≥—Ä–∞
    this.gamePlay.addNewGameListener(this.onNewGameClick.bind(this));
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    this.gamePlay.addSaveGameListener(this.onSaveGameClick.bind(this));
    // –ó–∞–≥—Ä—É–∑–∫–∞
    this.gamePlay.addLoadGameListener(this.onLoadGameClick.bind(this));

    // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    const humanTeam = generateTeam(
      new Team().humanTypes,
      1,
      this.gamePlay.boardSize
    );
    const computerTeam = generateTeam(
      new Team().computerTypes,
      1,
      this.gamePlay.boardSize
    );
    this.generateTeamsPosition(this.humanTeam, this.computerTeam);
  }

  // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
  generateTeamsPosition(team1, team2) {
    this.humanPositions = getPositions(
      team1.length,
      "human",
      this.gamePlay.boardSize
    );
    this.computerPositions = getPositions(
      team2.length,
      "computer",
      this.gamePlay.boardSize
    );
  }

  // –º–∞—Å—Å–∏–≤ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤
  getPositions(characterCount, player, this.gamePlay.boardSize) {
    const positionsPlayers = [];
    const possiblePositions = [];
    for (let i = 0; i < this.gamePlay.boardSize * 2; i += this.gamePlay.boardSize) {
      if (player === "human") {
        possiblePositions.push(i, i + 1);
      }
      if (player === "computer") {
        possiblePositions.push(i + this.gamePlay.boardSize - 2, i + this.gamePlay.boardSize - 1);
      }
    }

    let possibleCountPositions = this.gamePlay.boardSize * 2;
    for (let i = 0; i < characterCount; i += 1) {
      const position = Math.floor(Math.random() * possibleCountPositions);
      positionsPlayers.push(possiblePositions[position]);
      possiblePositions.splice(position, 1);
      possibleCountPositions -= 1;
    }

    return positionsPlayers;
  }

  onCellEnter(index) {
    const playersItem = this.players.find((item) => item.position === index);
    // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üéñlevel ‚öîattack üõ°defence ‚ù§health, –µ—Å–ª–∏ –≤ –ø–æ–ª–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂
    if (playersItem) {
      const { level, health, attack, defence } = playersItem.character;
      const message = `\u{1F396} ${level} \u{2694} ${attack} \u{1F6E1} ${defence} \u{2764} ${health}`;
      this.gamePlay.showCellTooltip(message, index);
    }
  }
  onCellLeave(index) {
    // —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É

    if (!this.player) this.gamePlay.hideCellTooltip(index);
  }

  onCellClick(index) {

    // –í—ã–¥–µ–ª—è–µ–º –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    let currentChar = this.players.find((char) => char.position === index);

    if (currentChar && humanCell) {
      this.players.forEach((elem) => this.gamePlay.deselectCell(elem.position));

      this.selectedChar = currentChar;
      this.gamePlay.selectCell(this.selectedChar.position);
    }

    if (this.selectedChar && !currentChar) {
      // –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –∫–ª–µ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞
      this.players.forEach((elem) => this.gamePlay.deselectCell(elem.position));
      currentChar = this.selectedChar;
      currentChar.position = index;

      this.gamePlay.redrawPositions(this.players);

      if (this.currentTurn === "player") this.currentTurn = "computer";
        else {
      this.currentTurn === "player";
    }
    }
  }
}
